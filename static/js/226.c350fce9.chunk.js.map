{"version":3,"file":"static/js/226.c350fce9.chunk.js","mappings":"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","sources":["pages/Authentication/ForgotPassword/components/FormContainer/validation.ts","pages/Authentication/ForgotPassword/components/FormContainer/index.tsx","pages/Authentication/ForgotPassword/index.tsx"],"sourcesContent":["import * as yup from 'yup';\n\nexport const schema = yup.object().shape({\n\tusername: yup.string().required().label('Username'),\n\tpassword: yup\n\t\t.string()\n\t\t.required()\n\t\t.matches(\n\t\t\t/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\n\t\t\t'Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character!'\n\t\t)\n\t\t.max(30, 'Cannot exceed 30 chars!')\n\t\t.label('Password'),\n\tnewPassword: yup\n\t\t.string()\n\t\t.required()\n\t\t.matches(\n\t\t\t/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\n\t\t\t'Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character!'\n\t\t)\n\t\t.max(30, 'Cannot exceed 30 chars!')\n\t\t.notOneOf([yup.ref('password')], 'New password must not be equal to Password!')\n\t\t.label('Password'),\n\tconfirmNewPassword: yup\n\t\t.string()\n\t\t.oneOf([yup.ref('newPassword')], 'Confirm Password must be equal to New Password!')\n\t\t.label('Password')\n});\n","import React, { ReactElement } from 'react';\nimport { Controller, useForm } from 'react-hook-form';\nimport { useNavigate } from 'react-router';\n\nimport { useColorMode, Container, VStack, Text, HStack } from '@chakra-ui/react';\n\nimport { yupResolver } from '@hookform/resolvers/yup';\n\nimport { Form } from './types';\nimport { schema } from './validation';\n\nimport Button from '../../../../../components/Clickable/Button';\nimport Divider from '../../../../../components/Divider';\nimport Panel from '../../../../../components/Panel';\nimport { Color } from '../../../../../theme/types';\nimport Password from '../../../components/Password';\nimport Username from '../../../components/Username';\n\nexport const color: keyof Color = 'light_blue';\n\nexport const defaultValues: Form = {\n\tusername: '',\n\tpassword: '',\n\tnewPassword: '',\n\tconfirmNewPassword: ''\n};\n\nconst FormContainer = (): ReactElement => {\n\tconst { colorMode } = useColorMode();\n\n\tconst navigate = useNavigate();\n\n\tconst form = useForm<Form>({\n\t\tmode: 'onTouched',\n\t\treValidateMode: 'onChange',\n\t\tdefaultValues,\n\t\tresolver: yupResolver(schema)\n\t});\n\n\tconst handleChangePassword = (values: Form): void => {\n\t\tconsole.log(values);\n\t};\n\n\treturn (\n\t\t<Container\n\t\t\tas={VStack}\n\t\t\twidth='100%'\n\t\t\theight='inherit'\n\t\t\tmaxWidth='container.sm'\n\t\t\tcenterContent\n\t\t\tjustifyContent='center'\n\t\t\tp={4}\n\t\t\tspacing={0}\n\t\t>\n\t\t\t<Panel size='xl' isFullWidth>\n\t\t\t\t{{\n\t\t\t\t\tbody: (\n\t\t\t\t\t\t<VStack width='100%' divider={<Divider />} spacing={4}>\n\t\t\t\t\t\t\t<VStack width='100%' alignItems='flex-start' spacing={0}>\n\t\t\t\t\t\t\t\t<Text\n\t\t\t\t\t\t\t\t\talign='left'\n\t\t\t\t\t\t\t\t\tcolor={`gray.${colorMode === 'light' ? 900 : 50}`}\n\t\t\t\t\t\t\t\t\tfontSize='4xl'\n\t\t\t\t\t\t\t\t\tfontWeight='semibold'\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tForgot Password?\n\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t\t<Text align='left' color={`gray.${colorMode === 'light' ? 400 : 500}`} fontSize='sm'>\n\t\t\t\t\t\t\t\t\tIn order to reset password please enter the username, the current password and the\n\t\t\t\t\t\t\t\t\tnew password!\n\t\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t\t</VStack>\n\n\t\t\t\t\t\t\t<Controller\n\t\t\t\t\t\t\t\tcontrol={form.control}\n\t\t\t\t\t\t\t\tname='username'\n\t\t\t\t\t\t\t\trender={({ field, fieldState }) => (\n\t\t\t\t\t\t\t\t\t<Username\n\t\t\t\t\t\t\t\t\t\tfield={field}\n\t\t\t\t\t\t\t\t\t\tfieldState={fieldState}\n\t\t\t\t\t\t\t\t\t\tcolor={color}\n\t\t\t\t\t\t\t\t\t\tcolorMode={colorMode}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t<VStack width='100%' spacing={2}>\n\t\t\t\t\t\t\t\t<Controller\n\t\t\t\t\t\t\t\t\tcontrol={form.control}\n\t\t\t\t\t\t\t\t\tname='password'\n\t\t\t\t\t\t\t\t\trender={({ field, fieldState }) => (\n\t\t\t\t\t\t\t\t\t\t<Password\n\t\t\t\t\t\t\t\t\t\t\tfield={field}\n\t\t\t\t\t\t\t\t\t\t\tfieldState={fieldState}\n\t\t\t\t\t\t\t\t\t\t\tcolor={color}\n\t\t\t\t\t\t\t\t\t\t\tcolorMode={colorMode}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<Controller\n\t\t\t\t\t\t\t\t\tcontrol={form.control}\n\t\t\t\t\t\t\t\t\tname='newPassword'\n\t\t\t\t\t\t\t\t\trender={({ field, fieldState }) => (\n\t\t\t\t\t\t\t\t\t\t<Password\n\t\t\t\t\t\t\t\t\t\t\tfield={field}\n\t\t\t\t\t\t\t\t\t\t\tfieldState={fieldState}\n\t\t\t\t\t\t\t\t\t\t\tlabel='New Password'\n\t\t\t\t\t\t\t\t\t\t\tcolor={color}\n\t\t\t\t\t\t\t\t\t\t\tcolorMode={colorMode}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<Controller\n\t\t\t\t\t\t\t\t\tcontrol={form.control}\n\t\t\t\t\t\t\t\t\tname='confirmNewPassword'\n\t\t\t\t\t\t\t\t\trender={({ field, fieldState }) => (\n\t\t\t\t\t\t\t\t\t\t<Password\n\t\t\t\t\t\t\t\t\t\t\tfield={field}\n\t\t\t\t\t\t\t\t\t\t\tfieldState={fieldState}\n\t\t\t\t\t\t\t\t\t\t\tlabel='Confirm Password'\n\t\t\t\t\t\t\t\t\t\t\tcolor={color}\n\t\t\t\t\t\t\t\t\t\t\tcolorMode={colorMode}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</VStack>\n\t\t\t\t\t\t</VStack>\n\t\t\t\t\t),\n\t\t\t\t\tfooter: (\n\t\t\t\t\t\t<HStack width='100%' justifyContent='space-between'>\n\t\t\t\t\t\t\t<Button onClick={() => navigate(-1)} variant='outlined'>\n\t\t\t\t\t\t\t\tBack\n\t\t\t\t\t\t\t</Button>\n\n\t\t\t\t\t\t\t<Button color={color} onClick={form.handleSubmit((values) => handleChangePassword(values))}>\n\t\t\t\t\t\t\t\tChange Password\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</HStack>\n\t\t\t\t\t)\n\t\t\t\t}}\n\t\t\t</Panel>\n\t\t</Container>\n\t);\n};\n\nexport default FormContainer;\n","import React, { ReactElement } from 'react';\n\nimport { useMediaQuery, SimpleGrid } from '@chakra-ui/react';\n\nimport FormContainer from './components/FormContainer';\n\nimport IllustrationContainer from '../components/IllustrationContainer';\n\nconst ForgotPassword = (): ReactElement => {\n\tconst [isMd] = useMediaQuery('(max-width: 960px)');\n\n\treturn (\n\t\t<SimpleGrid width='100%' height='100vh' columns={!isMd ? 2 : 1} spacing={0}>\n\t\t\t<FormContainer />\n\t\t\t{!isMd ? <IllustrationContainer /> : null}\n\t\t</SimpleGrid>\n\t);\n};\n\nexport default ForgotPassword;\n"],"names":["schema","yup","shape","username","required","label","password","matches","max","newPassword","notOneOf","confirmNewPassword","oneOf","color","defaultValues","colorMode","useColorMode","navigate","useNavigate","form","useForm","mode","reValidateMode","resolver","yupResolver","as","VStack","width","height","maxWidth","centerContent","justifyContent","p","spacing","Panel","size","isFullWidth","body","divider","Divider","alignItems","align","fontSize","fontWeight","control","name","render","field","fieldState","Username","Password","footer","Button","onClick","variant","handleSubmit","values","console","log","handleChangePassword","useMediaQuery","isMd","columns","IllustrationContainer"],"sourceRoot":""}